#!/usr/bin/env python
# -*- coding: utf-8 -*-

from Bio import SeqIO
import argparse

def processLastal(lastOut):
    with open(lastOut,"r") as infile:

        pairwiseAln =set()
        for line in infile:
            if not line.startswith("#"):

                (score, q, qstart, qalg, qstrand, qsize, t, tstart, talg, tstrand, tsize, blocks) = line.split()[:12]
                (score, qstart, qalg, qsize, tstart, talg, tsize) = map(int, (score, qstart, qalg, qsize, tstart, talg, tsize))


                #removed score as it seems even in perfect matches the score is not always the same
                #if all(v == score for v in (score, qalg, qsize, talg, tsize)) and q != t:
                if all(v == qalg for v in (qalg, qsize, talg, tsize)) and q != t:
                    if q.isdigit():
                        pairwiseAln.add(q,t)
                    elif t.isdigit():
                        pairwiseAln.add(t,q)
                    else:
                        print("None of fasta header seems to represent redundans output (integer values)")
                        exit(1)

    infile.close()
    outdict = dict((x, y) for x, y in pairwiseAln)
    print("Number of perfect matches:\t%i" % len(outdict))
    return outdict


def processFasta(dicPairs, redundands,outputfile):

    handle=open(redundands, "rU")
    redundands_seq = SeqIO.parse(handle,'fasta')
    output = open(outputfile,'w')
    for record in redundands_seq:
        if record.id in dicPairs:
            output.write(">" + dicPairs[record.id] + "\n" + record.seq)
        else:
            print("Redundans id %s not present in pairwise dictionary." % record.id)
            exit(1)

    handle.close()
    output.close()


def main():
    parser = argparse.ArgumentParser(description='Script to replace fasta headers generated by redundans by the previous ones.')
    parser.add_argument(dest='lastOutput', metavar='lastTabOut', help='Lastal output file in TAB format mapping the reference inputted to redundands against redundans output.')
    parser.add_argument(dest='fasta_file', metavar='fastaFile', help='Redundans output file.')
    parser.add_argument(dest='outputFile', metavar='outputFile', help='File to write corrected output.')
    args = parser.parse_args()

    print("Processing lastal output..")
    validPairWise = processLastal(args.lastOutput)
    print("Writing new fasta..")
    processFasta(validPairWise,args.fasta_file,args.outputFile)

if __name__ == "__main__":
    main()