#!/usr/bin/env python
# -*- coding: utf-8 -*-

from Bio import SeqIO
import argparse

def processFasta(original, redundands,outputfile):
    handle=open(original, "rU")
    original_seq = SeqIO.parse(handle,'fasta')
    id = 1
    mapIds = {}
    for record in original_seq:
        mapIds[id] = (record.id,record.seq)
        id +=1
    original_seq.close()

    handle2=open(redundands,"rU")
    redundands_seq = SeqIO.parse(handle2,'fasta')
    output = open(outputfile,'w')
    for record in redundands_seq:
        if not record.id in mapIds:
            print(record.id)
            print("Error. It seems redundands fasta file has more IDs than original. This can not be possible")
            exit(1)
        else:
            output.write(">" + mapIds[record.id][0] + "\n" + mapIds[record.id][1] + "\n")
    handle2.close()
    output.close()


def main():
    parser = argparse.ArgumentParser(description='Script to replace fasta headers generated by redundans by the previous ones.')
    parser.add_argument(dest='fasta_file1', metavar='fastaFile1', help='Original FASTA file inputted in redundans sorted ny scaffold length in decreasing order.')
    parser.add_argument(dest='fasta_file2', metavar='fastaFile2', help='Redundans output file.')
    parser.add_argument(dest='outputFile', metavar='outputFile', help='File to write corrected output.')
    args = parser.parse_args()

    processFasta(args.fasta_file1,args.fasta_file2,args.outputFile)

if __name__ == "__main__":
    main()