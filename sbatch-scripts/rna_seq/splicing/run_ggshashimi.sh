#!/usr/bin/env bash
display_usage() {
echo 'Script to run ggsashimi for coordinates given by a config file (usually generated by the processing scripts for each splicing tools)

-1st argument must be the bam files list. (1st col sample ID, 2nd file path, 3rd group(not mandatory))
-2st argument must be the config file. (1st column represent the coordinates, 2nd gene name, 3rd event type, 4th strand). If strand is not provided
plots will be drawn using aligments from both strands.
-3nd argument must be the output_directory.
-4th argument is optional. It refers to the gtf annotation file. (can be just the gtf with exons). Default: "/home/mcfonseca/shared/genomes/human/hg38/gencode.v31.transcript.exon.gtf. "-" ignores this argument and used the default value.
-5th is optional. Refers to the minimum number of reads supporting a junction to be drawn. Default: 2. Values:[int|-]
-6th is optional. Refers to the RNA stranded protocol. Values:[no_stranded|fr|rf|-] Default: rf.
-7th is optional. Set this argument if you want to combine/overlay density histograms from different replicates of the same group into one single track. Default: true. Values: [true|false|-].
-8th is optional. Set this argument if you want to aggregate counts between replicates of the same group to be displayed as a single value in the group track. Value should refer to the aggregation method. Default: no_aggregation. Values:[no_aggregation|median|median_j|mean|mean_j|-]. Requires overlay (7th arg) to be true.
-9th is optional. Refers to a color pallete file. One color per line, should be the same as the different number of groups.'
}


if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] ; then
        printf "ERROR:Please provide at least the 3 first arguments required for the script.\n\n"
        display_usage 
        exit 1
fi

BAMS=$(readlink -f "$1")
CONFIG=$(readlink -f "$2")
readarray COORD_ARRAY < $(readlink -f "$2")
JOBS=${#COORD_ARRAY[@]}
OUTDIR=$(readlink -f "$3")
if [[ ! -d $(readlink -f "$3") ]]; then
    mkdir $(readlink -f "$3")
fi

if [[ -z "$4" || "$4" == "-" ]]; then
    GTF="/home/mcfonseca/shared/genomes/human/hg38/gencode.v31.transcript.exon.gtf"
else
    GTF=$(readlink -f "$4")
fi 

####MIN READS#######
if [[ -z "$5" || "$5" == "-" ]]; then
    MIN_READS="2"
else
    MIN_READS="$5"
fi

#####STRANDNESS#####
if [[ -z "$6" || "$6" == "-" || "$6" == "rf" ]];then
    STRANDNESS="MATE2_SENSE"
elif [[ "$6" == "fr" ]]; then
    STRANDNESS="MATE1_SENSE"
elif [[ "$6" == "no_stranded" ]];then
    STRANDNESS="NONE"
else
    printf "Please set a valid value for the 6th argument.\n"
    display_usage
    exit 1
fi

COLOR_LEVELS_INDEX=3
HISTOGRAM_TRANSPARENCY=0.5
CMD="/sashimi-plot.py -b $BAMS -g $GTF -M $MIN_READS -C $COLOR_LEVELS_INDEX --alpha $HISTOGRAM_TRANSPARENCY --shrink" 

######Overlay group tracks""""""
if [[ -z "$7" || "$7" == "-" || "$7" == "true" ]]; then
    OVERLAY_LEVELS_INDEX=3
    CMD="$CMD -O $OVERLAY_LEVELS_INDEX"
elif [[ "$7" == "false" ]]; then
    OVERLAY_LEVELS_INDEX="false"
else
    printf "Please set a valid value for the 7th argument.\n"
    display_usage
    exit 1
fi

######Aggregation#####
if [[ -z "$8" || "$8" == "-"  ]];then
    AGGREGATION="false"
elif [[ "$8" == "mean" || "$8" == "mean_j" || "$8" == "median" || "$8" == "median_j" ]]; then
    if [[ $OVERLAY_LEVELS_INDEX == "false" ]]; then
        printf "Error. Please set the 7th argument (overlay) to true, if you want to aggregate counts.\n"
        display_usage
        exit 1
    else
        AGGREGATION="$8"
        CMD="$CMD -A $AGGREGATION"
    fi
else
    printf "Please set a valid value for the 8th argument.\n"
    display_usage
    exit 1
fi

######Pallete#######
if [[ ! -z "$9" ]]; then
    pallete="$(readlink -f "$9")"
    CMD="$CMD -P $pallete"
fi

cat > gg_sashimi.sbatch <<EOL
#!/bin/bash
#SBATCH --job-name=gg
#SBATCH --time=72:00:00
#SBATCH --mem=20G
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=5
#SBATCH --image=guigolab/ggsashimi:latest
#SBATCH --output=%j_gg_sashimi.log
#SBATCH --array=0-$(( $JOBS - 1 ))%50

readarray -t COORD < <(cat "$CONFIG")
line=\${COORD[\$SLURM_ARRAY_TASK_ID]}

coordinate=\$(echo \${line} | awk '{print \$1}')
gene_name=\$(echo \${line} | awk '{print \$2}') 
event_type=\$(echo \${line} | awk '{print \$3}')
strand=\$(echo \${line} | awk '{print \$4}')
if [[ "\$strand" == "minus" ]]; then
    CMD_FINAL="$CMD --out-strand minus"
elif [[ "\$strand" == "plus" ]]; then
    CMD_FINAL="$CMD --out-strand plus"
else
    CMD_FINAL="$CMD --out-strand both"
fi

cd $OUTDIR
CMD_FINAL="\$CMD_FINAL -c \$coordinate -o \${gene_name}_\${event_type}_\${coordinate/:/-}_\${strand}"
srun shifter \$CMD_FINAL
echo "\$line PROCESSED"
echo "Statistics for job \$SLURM_JOB_ID:"
sacct --format="JOBID,State,ExitCode,DerivedExitCode,Start,End,Elapsed,CPUTime,AveDiskRead,AveDiskWrite,MaxRSS,MaxVMSize" -j \$SLURM_JOB_ID

EOL

sbatch gg_sashimi.sbatch
