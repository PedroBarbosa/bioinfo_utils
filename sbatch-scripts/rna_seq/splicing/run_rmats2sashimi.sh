#!/usr/bin/env bash
display_usage() {
echo 'Script to run rmats2sashimiplot for coordinates given by a config file (usually generated by the processing scripts for each splicing tool)

-1st argument must be the bam files list. (1st col sample ID, 2nd file path, 3rd group
-2st argument must be the config file. (1st column represent the coordinates, 2nd gene name, 3rd event type, 4th strand).
-3nd argument must be the output_directory.
-4th argument is optional. It refers to the gff3 annotation file. Default: "/home/mcfonseca/shared/genomes/human/hg38/gencode_v34_primary_assembly.gff3". "-" ignores this argument and used the default value.
-5th is optional. Refers to the minimum number of reads supporting a junction to be drawn. Default: 5. Values:[int|-]
-6th is optional. Refers to how much should we scale down introns size. Default: 5. Values:[int|-]
-7th is optional. Set this argument if you want to combine/merge density histograms from different replicates of the same group into one single track. Default: true. Values: [true|false|-].
-8th is optional. Refers to a color pallete file. One color per line, should be the same as the different number of groups.'
}



if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] ; then
        printf "ERROR:Please provide at least the 3 first arguments required for the script.\n\n"
        display_usage 
        exit 1
fi

BAMS=$(readlink -f "$1")
CONFIG=$(readlink -f "$2")
readarray COORD_ARRAY < $(readlink -f "$2")
JOBS=${#COORD_ARRAY[@]}
OUTDIR=$(readlink -f "$3")

if [[ ! -d $(readlink -f "$3") ]]; then
    mkdir $(readlink -f "$3")
fi

if [[ -z "$4" || "$4" == "-" ]]; then
    GTF="/home/mcfonseca/shared/genomes/human/hg38/gencode_v34_primary_assembly.gff3"
else
    GTF=$(readlink -f "$4")
fi 

####MIN READS#######
if [[ -z "$5" || "$5" == "-" ]]; then
    MIN_READS="5"
else
    MIN_READS="$5"
fi

#####SCALE INTRONS#####
if [[ -z "$6" || "$6" == "-" ]];then
    SCALE_INTRONS=5
else
    SCALE_INTRONS="$6"
fi

#####PROCESS CONFIG######
bam1=""
bam2=""
labels1=""
labels2=""
group1=""
group1_idx=""
group2=""
group2_idx=""
i=1
previous_group=""
while read line; do
    _group=$(echo ${line} | awk '{print $3}')
    if [ $i -eq 1 ]; then
        labels1=$(echo ${line} | awk '{print $1}')
        bam1=$(echo ${line} | awk '{print $2}')
        group1=${_group}
        group1_idx=$i
        previous_group=$_group
    elif [ $previous_group != $_group ]; then
        labels2=$(echo ${line} | awk '{print $1}')
        bam2=$(echo ${line} | awk '{print $2}')
        group2=${_group}
        group2_idx=$i
        previous_group=${_group}
    elif [ $_group == $group1 ]; then
        labels1+=",$(echo ${line} | awk '{print $1}')"
        bam1+=",$(echo ${line} | awk '{print $2}')"
        group1_idx+=",$i"
        previous_group=$_group
    elif [ $_group == $group2 ]; then
        labels2+=",$(echo ${line} | awk '{print $1}')"
        bam2+=",$(echo ${line} | awk '{print $2}')"
        group2_idx+=",$i"
        previous_group=$_group
    fi
    i=$((i + 1))    
done < $BAMS
CMD="rmats2sashimiplot --min-counts $MIN_READS --intron_s $SCALE_INTRONS -o $OUTDIR --b1 $bam1 --b2 $bam2 --l1 $labels1 --l2 $labels2"


######Merge group tracks""""""
if [[ -z "$7" || "$7" == "-" || "$7" == "true" ]]; then
    echo "$group1: $group1_idx" > groups_idx.gf
    echo "$group2: $group2_idx" >> groups_idx.gf
    CMD="$CMD --group-info groups_idx.gf"
elif [[ "$7" != "false" ]]; then
    printf "Please set a valid value for the 7th argument.\n"
    display_usage
    exit 1
fi

######Pallete#######
if [[ ! -z "$8" && -f "$(readlink -f "$8")" ]]; then
    pallete="$(readlink -f "$8")"
    colors=""
    i=0
    while read line; do
        if [ $i -eq 0 ]; then
            colors+="$line"
        else
            colors+=",$line"
        fi
        i=$((i + 1))
    done < $pallete

    CMD="$CMD --color $colors"
fi
echo "---------"
echo "Base cmd:"
echo "$CMD"
echo "---------"

cat > rmats2sashimiplot.sbatch <<EOL
#!/bin/bash
#SBATCH --job-name=plot_sashimi
#SBATCH --time=72:00:00
#SBATCH --mem=20G
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=5
#SBATCH --image=mcfonsecalab/rmats:latest
#SBATCH --output=%j_rmat2sashimi.log
#SBATCH --array=0-$(( $JOBS - 1 ))%50

readarray -t COORD < <(cat "$CONFIG")
line=\${COORD[\$SLURM_ARRAY_TASK_ID]}

coordinate=\$(echo \${line} | awk '{print \$1}')
chromosome=\$(echo \${coordinate} | cut -f1 -d ":")
start=\$(echo \${coordinate} | cut -f2 -d ":" | cut -f1 -d "-")
end=\$(echo \${coordinate} | cut -f2 -d ":" | cut -f2 -d "-")
gene_name=\$(echo \${line} | awk '{print \$2}') 
event_type=\$(echo \${line} | awk '{print \$3}')
strand=\$(echo \${line} | awk '{print \$4}')

if [[ "\$strand" == "minus" ]]; then
    final_coordinate="\${chromosome}:-:\${start}:\${end}"

elif [[ "\$strand" == "plus" ]]; then
    final_coordinate="\${chromosome}:+:\${start}:\${end}"
else
    printf "Stand is required."
    exit 1
fi
CMD_FINAL="$CMD -c \${final_coordinate}:$GTF"

srun shifter \$CMD_FINAL
echo "\$line PROCESSED"
echo "Statistics for job \$SLURM_JOB_ID:"
sacct --format="JOBID,State,ExitCode,DerivedExitCode,Start,End,Elapsed,CPUTime,AveDiskRead,AveDiskWrite,MaxRSS,MaxVMSize" -j \$SLURM_JOB_ID

EOL

sbatch rmats2sashimiplot.sbatch
